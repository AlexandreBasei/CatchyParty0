<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multiplayer Game</title>
</head>

<body>
    <h1>Multiplayer Game</h1>

    <ul id="playersList"></ul>

    <button id="startButton" onclick="startGame()">Start Game</button>

    <input type="text" id="guessInput" style="display: none;" placeholder="Enter your guess">
    <button id="btnGuess" style="display: none;" onclick="sendGuess()">Submit Guess</button>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.3/socket.io.js"></script>    <script>
        const socket = io();

        let username;

        const guessInput = document.getElementById('guessInput');
        guessInput.addEventListener('keyup', function (event) {
            if (event.key === 'Enter') {
                sendGuess(); // Call the sendGuess function when 'Enter' is pressed
            }
        });

        function startGame() {
            socket.emit('startGame');
        }

        function sendGuess() {
            const guess = document.getElementById('guessInput').value;
            socket.emit('guess', guess);
        }

        socket.on('updatePlayers', (players) => {
            const playersList = document.getElementById('playersList');
            playersList.innerHTML = '';
            players.forEach(player => {
                const li = document.createElement('li');
                li.textContent = player.username;
                playersList.appendChild(li);
            });
        });

        socket.on('startGame', (word) => {
            // Handle game start on the client side
            console.log(`Game started! Word: ${word}`);
            document.getElementById('guessInput').style.display = 'block';
            document.getElementById('btnGuess').style.display = 'block';
        });

        socket.on('updateScore', (updatedScore, updatedPlayers) => {
            // Update the score on the client side
            score = updatedScore;
            updateScoreDisplay(updatedPlayers);
        });

        socket.on('gameOver', (winner) => {
            // Handle game over on the client side
            console.log(`Game over! Winner: ${winner}`);
            displayGameOverMessage(winner);
        });

        socket.on('updateInterface', () => {
            // Mise à jour de l'interface des deux clients
            document.getElementById('startButton').style.display = 'block';
            document.getElementById('guessInput').style.display = 'block';
            document.getElementById('btnGuess').style.display = 'block';

            // Remove game over message and replay button
            const gameOverMessage = document.getElementById('gameOverMessage');
            const replayButton = document.getElementById('replayButton');

            if (gameOverMessage) {
                gameOverMessage.remove();
            }

            if (replayButton) {
                replayButton.remove();
            }
        });

        function updateScoreDisplay(players) {
            const playersList = document.getElementById('playersList');
            playersList.innerHTML = '';
            players.forEach(player => {
                const li = document.createElement('li');
                li.textContent = `${player.username} - Score: ${score[player.id] || 0}`;
                playersList.appendChild(li);
            });
        }

        function displayGameOverMessage(winner) {
            // Hide game elements
            document.getElementById('startButton').style.display = 'none';
            document.getElementById('guessInput').style.display = 'none';
            document.getElementById('btnGuess').style.display = 'none';

            // Display game over message and replay button
            const gameOverMessage = document.createElement('p');
            gameOverMessage.textContent = `Game over! Winner: ${winner}`;
            gameOverMessage.id = 'gameOverMessage';
            document.body.appendChild(gameOverMessage);

            const replayButton = document.createElement('button');
            replayButton.textContent = 'Replay';
            replayButton.id = 'replayButton';
            replayButton.onclick = () => {
                // Émettre un événement vers le serveur pour synchroniser l'interface
                socket.emit('replayRequest');
            };

            document.body.appendChild(replayButton);
        }

        function generateRandomUsername() {
            const adjectives = ['Happy', 'Silly', 'Clever', 'Lucky', 'Funny', 'Brave'];
            const nouns = ['Cat', 'Dog', 'Bird', 'Monkey', 'Elephant', 'Tiger'];

            const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];
            const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];

            return randomAdjective + randomNoun;
        }

        // Utilisation de la fonction pour générer un pseudonyme aléatoire
        const randomUsername = generateRandomUsername();
        console.log(randomUsername);
        socket.emit('join', randomUsername);
    </script>
</body>

</html>